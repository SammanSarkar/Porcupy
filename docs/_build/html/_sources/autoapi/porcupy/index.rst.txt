porcupy
=======

.. py:module:: porcupy


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/porcupy/base/index
   /autoapi/porcupy/cpo/index
   /autoapi/porcupy/cpo_class/index
   /autoapi/porcupy/functions/index
   /autoapi/porcupy/gpu_cpo/index
   /autoapi/porcupy/porcupines/index
   /autoapi/porcupy/utils/index


Attributes
----------

.. autoapisummary::

   porcupy.GPU_AVAILABLE


Classes
-------

.. autoapisummary::

   porcupy.CPO
   porcupy.Optimizer
   porcupy.PorcupinePopulation
   porcupy.DefenseMechanisms
   porcupy.PopulationManager
   porcupy.PopulationCycle
   porcupy.SelectionStrategies


Functions
---------

.. autoapisummary::

   porcupy.cpo
   porcupy.sphere
   porcupy.rosenbrock
   porcupy.schwefel_2_22
   porcupy.schwefel_1_2
   porcupy.schwefel_2_21
   porcupy.step
   porcupy.quartic
   porcupy.rastrigin
   porcupy.ackley
   porcupy.griewank
   porcupy.schwefel
   porcupy.michalewicz
   porcupy.get_function_by_name
   porcupy.get_function_bounds
   porcupy.get_function_optimum


Package Contents
----------------

.. py:function:: cpo(fobj, lb, ub, pop_size=30, max_iter=100, f_ieqcons=None, verbose=False)

   Crested Porcupine Optimizer (CPO) for optimization problems.

   This function implements the CPO algorithm, a nature-inspired metaheuristic that mimics
   the defensive behaviors of crested porcupines (sight, sound, odor, physical attack) to
   balance exploration and exploitation, with cyclic population reduction for convergence.

   :param fobj: Objective function to minimize. Takes a 1D numpy array as input and returns a scalar.
   :type fobj: callable
   :param lb: Lower bounds for each dimension of the search space.
   :type lb: list or array-like
   :param ub: Upper bounds for each dimension of the search space.
   :type ub: list or array-like
   :param pop_size: Number of search agents (porcupines) in the initial population (default: 30).
   :type pop_size: int, optional
   :param max_iter: Maximum number of iterations (default: 100).
   :type max_iter: int, optional
   :param f_ieqcons: Constraint function returning a 1D array of inequality constraints (g(x) >= 0).
                     Infeasible solutions are assigned infinite fitness (default: None).
   :type f_ieqcons: callable, optional
   :param verbose: If True, print progress information for each iteration (default: False).
   :type verbose: bool, optional

   :returns: * **best_pos** (*ndarray*) -- Best solution found (1D array of length `dim`).
             * **best_cost** (*float*) -- Best fitness value found.
             * **cost_history** (*ndarray*) -- Best fitness value recorded at each iteration (1D array of length `max_iter`).

   :raises ValueError: If `lb` and `ub` have different lengths, `pop_size` or `max_iter` is non-positive,
       or `fobj` is not callable.

   .. rubric:: Notes

   The CPO algorithm is based on the paper "Crested Porcupine Optimizer: A new
   nature-inspired metaheuristic" by Mohamed Abdel-Basset et al. It uses four defensive
   mechanisms and cyclic population reduction to optimize complex problems.


.. py:class:: CPO(dimensions: int, bounds: Tuple[numpy.ndarray, numpy.ndarray], pop_size: int = 30, min_pop_size: Optional[int] = None, max_iter: int = 100, cycles: int = 2, alpha: float = 0.2, tf: float = 0.8, ftol: float = -np.inf, ftol_iter: int = 1)

   Bases: :py:obj:`porcupy.base.Optimizer`


   CPO (Crested Porcupine Optimizer) for optimization problems.

   This class implements the CPO algorithm, a nature-inspired metaheuristic that mimics
   the defensive behaviors of crested porcupines (sight, sound, odor, physical attack) to
   balance exploration and exploitation, with cyclic population reduction for convergence.

   :param dimensions: Number of dimensions in the search space.
   :type dimensions: int
   :param bounds: A tuple of size 2 where the first entry is the minimum bound while
                  the second entry is the maximum bound. Each array must be of shape
                  (dimensions,).
   :type bounds: tuple of numpy.ndarray
   :param pop_size: Number of search agents (porcupines) in the initial population (default: 30).
   :type pop_size: int, optional
   :param min_pop_size: Minimum population size during reduction cycles (default: pop_size // 2).
   :type min_pop_size: int, optional
   :param max_iter: Maximum number of iterations (default: 100).
   :type max_iter: int, optional
   :param cycles: Number of cycles for population reduction (default: 2).
   :type cycles: int, optional
   :param alpha: Convergence rate for fourth defense mechanism (default: 0.2).
   :type alpha: float, optional
   :param tf: Tradeoff threshold between third and fourth mechanisms (default: 0.8).
   :type tf: float, optional
   :param ftol: Relative error in objective_func(best_pos) acceptable for
                convergence (default: -np.inf).
   :type ftol: float, optional
   :param ftol_iter: Number of iterations over which the relative error in
                     objective_func(best_pos) is acceptable for convergence (default: 1).
   :type ftol_iter: int, optional

   .. attribute:: min_pop_size

      Minimum population size during reduction cycles.

      :type: int

   .. attribute:: cycles

      Number of cycles for population reduction.

      :type: int

   .. attribute:: alpha

      Convergence rate for fourth defense mechanism.

      :type: float

   .. attribute:: tf

      Tradeoff threshold between third and fourth mechanisms.

      :type: float

   .. attribute:: positions

      Current positions of all porcupines in the population.

      :type: ndarray

   .. attribute:: fitness

      Current fitness values of all porcupines.

      :type: ndarray

   .. attribute:: personal_best_pos

      Personal best positions found by each porcupine.

      :type: ndarray


   .. py:attribute:: min_pop_size
      :value: None



   .. py:attribute:: cycles
      :value: 2



   .. py:attribute:: alpha
      :value: 0.2



   .. py:attribute:: tf
      :value: 0.8



   .. py:attribute:: positions
      :value: None



   .. py:attribute:: fitness
      :value: None



   .. py:attribute:: personal_best_pos
      :value: None



   .. py:attribute:: positions_history
      :value: []



   .. py:attribute:: defense_types_history
      :value: []



   .. py:attribute:: pop_size_history
      :value: []



   .. py:attribute:: best_positions_history
      :value: []



   .. py:attribute:: fitness_history
      :value: []



   .. py:method:: optimize(objective_func: Callable, f_ieqcons: Optional[Callable] = None, n_processes: Optional[int] = None, verbose: bool = False, track_history: bool = True, **kwargs) -> Tuple[numpy.ndarray, float, numpy.ndarray]

      Optimize the objective function using Crested Porcupine Optimizer

      :param objective_func: The objective function to be minimized
      :type objective_func: callable
      :param f_ieqcons: Constraint function returning a 1D array of inequality constraints (g(x) >= 0)
      :type f_ieqcons: callable, optional
      :param n_processes: Number of processes to use for parallel evaluation
      :type n_processes: int, optional
      :param verbose: Whether to display progress information
      :type verbose: bool, optional
      :param \*\*kwargs: Additional arguments to pass to the objective function

      :returns: A tuple containing (best_position, best_cost, cost_history)
      :rtype: tuple



.. py:class:: Optimizer(dimensions: int, bounds: Tuple[numpy.ndarray, numpy.ndarray], pop_size: int = 30, max_iter: int = 100, options: Optional[Dict[str, Any]] = None, ftol: float = -np.inf, ftol_iter: int = 1)

   Bases: :py:obj:`abc.ABC`


   Base class for optimization algorithms in Porcupy.

   This abstract base class provides the foundation for all optimization
   algorithms in the Porcupy library. It defines the common interface and
   functionality that all optimizers should implement.

   :param dimensions: Number of dimensions in the search space.
   :type dimensions: int
   :param bounds: A tuple of size 2 where the first entry is the minimum bound while
                  the second entry is the maximum bound. Each array must be of shape
                  (dimensions,).
   :type bounds: tuple of numpy.ndarray
   :param pop_size: Number of search agents in the population (default: 30).
   :type pop_size: int, optional
   :param max_iter: Maximum number of iterations (default: 100).
   :type max_iter: int, optional
   :param options: A dictionary containing algorithm-specific parameters.
   :type options: dict, optional
   :param ftol: Relative error in objective_func(best_pos) acceptable for
                convergence (default: -np.inf).
   :type ftol: float, optional
   :param ftol_iter: Number of iterations over which the relative error in
                     objective_func(best_pos) is acceptable for convergence (default: 1).
   :type ftol_iter: int, optional


   .. py:attribute:: dimensions


   .. py:attribute:: bounds


   .. py:attribute:: pop_size
      :value: 30



   .. py:attribute:: max_iter
      :value: 100



   .. py:attribute:: options
      :value: None



   .. py:attribute:: ftol


   .. py:attribute:: ftol_iter
      :value: 1



   .. py:class:: ToHistory

      Bases: :py:obj:`tuple`


      .. py:attribute:: best_cost


      .. py:attribute:: mean_cost


      .. py:attribute:: position


      .. py:attribute:: population_size



   .. py:method:: reset()

      Reset the attributes of the optimizer

      This method reinitializes all history tracking attributes and
      prepares the optimizer for a new optimization run.



   .. py:method:: optimize(objective_func: Callable, n_processes: Optional[int] = None, verbose: bool = False, **kwargs) -> Tuple[numpy.ndarray, float, numpy.ndarray]
      :abstractmethod:


      Optimize the objective function

      :param objective_func: The objective function to be minimized
      :type objective_func: callable
      :param n_processes: Number of processes to use for parallel evaluation
      :type n_processes: int, optional
      :param verbose: Whether to display progress information
      :type verbose: bool, optional
      :param \*\*kwargs: Additional arguments to pass to the objective function

      :returns: A tuple containing (best_position, best_cost, cost_history)
      :rtype: tuple



.. py:class:: PorcupinePopulation(pop_size: int, dimensions: int, bounds: Tuple[numpy.ndarray, numpy.ndarray], init_pos: Optional[numpy.ndarray] = None)

   Class representing a population of porcupines for the Crested Porcupine Optimizer.

   This class handles the population structure, initialization, and provides methods
   for population management and dynamics.

   :param pop_size: Number of porcupines in the population.
   :type pop_size: int
   :param dimensions: Number of dimensions in the search space.
   :type dimensions: int
   :param bounds: A tuple of size 2 where the first entry is the minimum bound while
                  the second entry is the maximum bound. Each array must be of shape
                  (dimensions,).
   :type bounds: tuple of numpy.ndarray
   :param init_pos: Initial positions for the porcupines. If None, random positions are generated.
   :type init_pos: numpy.ndarray, optional

   .. attribute:: pop_size

      Current number of porcupines in the population.

      :type: int

   .. attribute:: dimensions

      Number of dimensions in the search space.

      :type: int

   .. attribute:: bounds

      Bounds for the search space.

      :type: tuple of numpy.ndarray

   .. attribute:: positions

      Current positions of all porcupines, shape (pop_size, dimensions).

      :type: numpy.ndarray

   .. attribute:: fitness

      Current fitness values of all porcupines, shape (pop_size,).

      :type: numpy.ndarray

   .. attribute:: personal_best_pos

      Personal best positions found by each porcupine, shape (pop_size, dimensions).

      :type: numpy.ndarray

   .. attribute:: personal_best_fitness

      Personal best fitness values for each porcupine, shape (pop_size,).

      :type: numpy.ndarray

   .. attribute:: best_pos

      Global best position found so far, shape (dimensions,).

      :type: numpy.ndarray

   .. attribute:: best_fitness

      Global best fitness value found so far.

      :type: float


   .. py:attribute:: pop_size


   .. py:attribute:: dimensions


   .. py:attribute:: bounds


   .. py:attribute:: fitness


   .. py:attribute:: personal_best_pos


   .. py:attribute:: personal_best_fitness


   .. py:attribute:: best_pos
      :value: None



   .. py:attribute:: best_fitness


   .. py:method:: evaluate(objective_func: Callable, **kwargs) -> None

      Evaluate the fitness of all porcupines

      :param objective_func: The objective function to minimize
      :type objective_func: callable
      :param \*\*kwargs: Additional arguments for the objective function



   .. py:method:: resize(new_size: int) -> None

      Resize the population to a new size

      :param new_size: New population size
      :type new_size: int



   .. py:method:: apply_bounds() -> None

      Apply boundary constraints to all positions



.. py:class:: DefenseMechanisms(alpha: float = 0.2, tf: float = 0.8)

   Class implementing the four defense mechanisms of the Crested Porcupine Optimizer.

   This class provides methods for the four defense mechanisms: sight, sound, odor,
   and physical attack, which are used to update the positions of porcupines.

   :param alpha: Convergence rate for the fourth defense mechanism.
   :type alpha: float
   :param tf: Tradeoff threshold between third and fourth mechanisms.
   :type tf: float

   .. attribute:: alpha

      Convergence rate for the fourth defense mechanism.

      :type: float

   .. attribute:: tf

      Tradeoff threshold between third and fourth mechanisms.

      :type: float


   .. py:attribute:: alpha
      :value: 0.2



   .. py:attribute:: tf
      :value: 0.8



   .. py:method:: sight_defense(position: numpy.ndarray, other_position: numpy.ndarray, best_position: numpy.ndarray) -> numpy.ndarray

      Apply the first defense mechanism (sight)

      :param position: Current position of the porcupine
      :type position: numpy.ndarray
      :param other_position: Position of another random porcupine
      :type other_position: numpy.ndarray
      :param best_position: Global best position
      :type best_position: numpy.ndarray

      :returns: Updated position
      :rtype: numpy.ndarray



   .. py:method:: sound_defense(position: numpy.ndarray, other_position: numpy.ndarray, rand_diff: numpy.ndarray) -> numpy.ndarray

      Apply the second defense mechanism (sound)

      :param position: Current position of the porcupine
      :type position: numpy.ndarray
      :param other_position: Position of another random porcupine
      :type other_position: numpy.ndarray
      :param rand_diff: Random difference vector
      :type rand_diff: numpy.ndarray

      :returns: Updated position
      :rtype: numpy.ndarray



   .. py:method:: odor_defense(position: numpy.ndarray, other_position: numpy.ndarray, rand_diff: numpy.ndarray, fitness: float, fitness_sum: float, t: int, max_iter: int) -> numpy.ndarray

      Apply the third defense mechanism (odor)

      :param position: Current position of the porcupine
      :type position: numpy.ndarray
      :param other_position: Position of another random porcupine
      :type other_position: numpy.ndarray
      :param rand_diff: Random difference vector
      :type rand_diff: numpy.ndarray
      :param fitness: Current fitness of the porcupine
      :type fitness: float
      :param fitness_sum: Sum of all fitness values in the population
      :type fitness_sum: float
      :param t: Current iteration
      :type t: int
      :param max_iter: Maximum number of iterations
      :type max_iter: int

      :returns: Updated position
      :rtype: numpy.ndarray



   .. py:method:: physical_attack(position: numpy.ndarray, other_position: numpy.ndarray, best_position: numpy.ndarray, fitness: float, fitness_sum: float, t: int, max_iter: int) -> numpy.ndarray

      Apply the fourth defense mechanism (physical attack)

      :param position: Current position of the porcupine
      :type position: numpy.ndarray
      :param other_position: Position of another random porcupine
      :type other_position: numpy.ndarray
      :param best_position: Global best position
      :type best_position: numpy.ndarray
      :param fitness: Current fitness of the porcupine
      :type fitness: float
      :param fitness_sum: Sum of all fitness values in the population
      :type fitness_sum: float
      :param t: Current iteration
      :type t: int
      :param max_iter: Maximum number of iterations
      :type max_iter: int

      :returns: Updated position
      :rtype: numpy.ndarray



.. py:class:: PopulationManager(initial_pop_size: int, min_pop_size: int, max_iter: int, cycles: int = 2)

   Class for managing the population dynamics in the Crested Porcupine Optimizer.

   This class handles the cyclic population reduction strategy and other
   population management tasks.

   :param initial_pop_size: Initial population size.
   :type initial_pop_size: int
   :param min_pop_size: Minimum population size during reduction.
   :type min_pop_size: int
   :param max_iter: Maximum number of iterations.
   :type max_iter: int
   :param cycles: Number of cycles for population reduction.
   :type cycles: int

   .. attribute:: initial_pop_size

      Initial population size.

      :type: int

   .. attribute:: min_pop_size

      Minimum population size during reduction.

      :type: int

   .. attribute:: max_iter

      Maximum number of iterations.

      :type: int

   .. attribute:: cycles

      Number of cycles for population reduction.

      :type: int


   .. py:attribute:: initial_pop_size


   .. py:attribute:: min_pop_size


   .. py:attribute:: max_iter


   .. py:attribute:: cycles
      :value: 2



   .. py:method:: calculate_pop_size(iteration: int) -> int

      Calculate the population size for the current iteration

      :param iteration: Current iteration number
      :type iteration: int

      :returns: Population size for the current iteration
      :rtype: int



.. py:class:: PopulationCycle(initial_pop_size: int, min_pop_size: int, max_iter: int, cycles: int = 2, reduction_strategy: str = 'linear')

   Class for managing cyclic population reduction in the Crested Porcupine Optimizer.

   This class implements the cyclic population reduction strategy, which is a key
   feature of the CPO algorithm. The population size varies cyclically throughout
   the optimization process to balance exploration and exploitation.

   :param initial_pop_size: Initial population size.
   :type initial_pop_size: int
   :param min_pop_size: Minimum population size during reduction.
   :type min_pop_size: int
   :param max_iter: Maximum number of iterations.
   :type max_iter: int
   :param cycles: Number of cycles for population reduction.
   :type cycles: int
   :param reduction_strategy: Strategy for population reduction ('linear', 'cosine', or 'exponential').
   :type reduction_strategy: str

   .. attribute:: initial_pop_size

      Initial population size.

      :type: int

   .. attribute:: min_pop_size

      Minimum population size during reduction.

      :type: int

   .. attribute:: max_iter

      Maximum number of iterations.

      :type: int

   .. attribute:: cycles

      Number of cycles for population reduction.

      :type: int

   .. attribute:: reduction_strategy

      Strategy for population reduction.

      :type: str


   .. py:attribute:: initial_pop_size


   .. py:attribute:: min_pop_size


   .. py:attribute:: max_iter


   .. py:attribute:: cycles
      :value: 2



   .. py:attribute:: reduction_strategy
      :value: 'linear'



   .. py:method:: calculate_pop_size(iteration: int) -> int

      Calculate the population size for the current iteration

      :param iteration: Current iteration number
      :type iteration: int

      :returns: Population size for the current iteration
      :rtype: int



.. py:class:: SelectionStrategies

   Class implementing various selection strategies for population reduction.

   This class provides methods for selecting which individuals to keep when
   reducing the population size.


   .. py:method:: best_selection(positions: numpy.ndarray, fitness: numpy.ndarray, new_size: int) -> Tuple[numpy.ndarray, numpy.ndarray]
      :staticmethod:


      Select the best individuals based on fitness

      :param positions: Current positions of all individuals
      :type positions: numpy.ndarray
      :param fitness: Current fitness values of all individuals
      :type fitness: numpy.ndarray
      :param new_size: New population size
      :type new_size: int

      :returns: A tuple containing (selected_positions, selected_fitness)
      :rtype: tuple



   .. py:method:: tournament_selection(positions: numpy.ndarray, fitness: numpy.ndarray, new_size: int, tournament_size: int = 3) -> Tuple[numpy.ndarray, numpy.ndarray]
      :staticmethod:


      Select individuals using tournament selection

      :param positions: Current positions of all individuals
      :type positions: numpy.ndarray
      :param fitness: Current fitness values of all individuals
      :type fitness: numpy.ndarray
      :param new_size: New population size
      :type new_size: int
      :param tournament_size: Size of each tournament
      :type tournament_size: int

      :returns: A tuple containing (selected_positions, selected_fitness)
      :rtype: tuple



   .. py:method:: roulette_wheel_selection(positions: numpy.ndarray, fitness: numpy.ndarray, new_size: int) -> Tuple[numpy.ndarray, numpy.ndarray]
      :staticmethod:


      Select individuals using roulette wheel selection

      :param positions: Current positions of all individuals
      :type positions: numpy.ndarray
      :param fitness: Current fitness values of all individuals
      :type fitness: numpy.ndarray
      :param new_size: New population size
      :type new_size: int

      :returns: A tuple containing (selected_positions, selected_fitness)
      :rtype: tuple



   .. py:method:: diversity_selection(positions: numpy.ndarray, fitness: numpy.ndarray, new_size: int, elite_fraction: float = 0.2) -> Tuple[numpy.ndarray, numpy.ndarray]
      :staticmethod:


      Select individuals based on fitness and diversity

      :param positions: Current positions of all individuals
      :type positions: numpy.ndarray
      :param fitness: Current fitness values of all individuals
      :type fitness: numpy.ndarray
      :param new_size: New population size
      :type new_size: int
      :param elite_fraction: Fraction of individuals to select based on fitness
      :type elite_fraction: float

      :returns: A tuple containing (selected_positions, selected_fitness)
      :rtype: tuple



.. py:function:: sphere(x)

   Sphere function for optimization benchmarking.

   The sphere function is a simple, unimodal function defined as f(x) = sum(x_i^2).
   Its global minimum is 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: rosenbrock(x)

   Rosenbrock function for optimization benchmarking.

   The Rosenbrock function is a non-convex function defined as
   f(x) = sum(100 * (x_{i+1} - x_i^2)^2 + (1 - x_i)^2).
   Its global minimum is 0 at x = [1, 1, ..., 1].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: schwefel_2_22(x)

   Schwefel 2.22 function for optimization benchmarking.

   This is a unimodal function defined as f(x) = sum(|x_i|) + prod(|x_i|).
   Its global minimum is 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: schwefel_1_2(x)

   Schwefel 1.2 function for optimization benchmarking.

   This is a unimodal function defined as f(x) = sum(sum(x_j)^2) for j=1 to i, i=1 to n.
   Its global minimum is 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: schwefel_2_21(x)

   Schwefel 2.21 function for optimization benchmarking.

   This is a unimodal function defined as f(x) = max(|x_i|).
   Its global minimum is 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: step(x)

   Step function for optimization benchmarking.

   This is a discontinuous function defined as f(x) = sum(floor(x_i + 0.5)^2).
   Its global minimum is 0 at x in [-0.5, 0.5]^n.

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: quartic(x)

   Quartic function with noise for optimization benchmarking.

   This is a function defined as f(x) = sum(i * x_i^4) + random[0, 1).
   Its global minimum is close to 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: rastrigin(x)

   Rastrigin function for optimization benchmarking.

   The Rastrigin function is a multimodal function defined as
   f(x) = 10 * dim + sum(x_i^2 - 10 * cos(2 * pi * x_i)).
   Its global minimum is 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: ackley(x)

   Ackley function for optimization benchmarking.

   The Ackley function is a multimodal function defined as
   f(x) = -20 * exp(-0.2 * sqrt(sum(x_i^2) / n)) - exp(sum(cos(2 * pi * x_i)) / n) + 20 + e.
   Its global minimum is 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: griewank(x)

   Griewank function for optimization benchmarking.

   The Griewank function is a multimodal function defined as
   f(x) = 1 + sum(x_i^2 / 4000) - prod(cos(x_i / sqrt(i))).
   Its global minimum is 0 at x = [0, 0, ..., 0].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: schwefel(x)

   Schwefel function for optimization benchmarking.

   The Schwefel function is a multimodal function defined as
   f(x) = 418.9829 * n - sum(x_i * sin(sqrt(|x_i|))).
   Its global minimum is 0 at x = [420.9687, ..., 420.9687].

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: michalewicz(x)

   Michalewicz function for optimization benchmarking.

   The Michalewicz function is a multimodal function with steep ridges and valleys.
   It has n! local minima, and the global minimum value depends on the dimension.

   :param x: Input vector (1D array) of shape (dim,).
   :type x: ndarray

   :returns: The computed function value.
   :rtype: float


.. py:function:: get_function_by_name(name: str) -> Callable

   Get a benchmark function by name.

   :param name: Name of the function.
   :type name: str

   :returns: The benchmark function.
   :rtype: callable

   :raises ValueError: If the function name is not recognized.


.. py:function:: get_function_bounds(name: str, dimensions: int) -> Tuple[numpy.ndarray, numpy.ndarray]

   Get the recommended bounds for a benchmark function.

   :param name: Name of the function.
   :type name: str
   :param dimensions: Number of dimensions.
   :type dimensions: int

   :returns: A tuple (lb, ub) containing the lower and upper bounds.
   :rtype: tuple

   :raises ValueError: If the function name is not recognized.


.. py:function:: get_function_optimum(name: str, dimensions: int) -> Tuple[numpy.ndarray, float]

   Get the global optimum for a benchmark function.

   :param name: Name of the function.
   :type name: str
   :param dimensions: Number of dimensions.
   :type dimensions: int

   :returns: A tuple (x_opt, f_opt) containing the optimal position and value.
   :rtype: tuple

   :raises ValueError: If the function name is not recognized.


.. py:data:: GPU_AVAILABLE
   :value: True


